<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Winget来定制新装的Windows机器</title>
    <link href="/2024/10/18/Winget%E6%9D%A5%E5%AE%9A%E5%88%B6%E6%96%B0%E8%A3%85%E7%9A%84Windows%E6%9C%BA%E5%99%A8/"/>
    <url>/2024/10/18/Winget%E6%9D%A5%E5%AE%9A%E5%88%B6%E6%96%B0%E8%A3%85%E7%9A%84Windows%E6%9C%BA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Winget介绍"><a href="#1-Winget介绍" class="headerlink" title="1. Winget介绍"></a>1. Winget介绍</h2><p>用户可以在 Windows 10 和 Windows 11 计算机上使用 <strong>WinGet</strong> 命令行工具来发现、安装、升级、删除和配置应用程序。 此工具是 Windows 程序包管理器服务的客户端接口。</p><h2 id="2-Winget-安装"><a href="#2-Winget-安装" class="headerlink" title="2. Winget 安装"></a>2. Winget 安装</h2><p>Windows 程序包管理器 <strong>WinGet</strong> 命令行工具作为<strong>应用安装程序</strong>的一部分在 Windows 11 和现代版本的 Windows 10 上提供。</p><p>可以<a href="https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab">从 Microsoft Store 获取应用安装程序</a>。 如果已安装，请确保已将其更新为最新版本。</p><blockquote><p>备注: <strong>WinGet</strong> 命令行工具仅在 Windows 10 1709（版本 16299）或更高版本上受支持。 在你首次以用户身份登录 Windows（这会触发 Microsoft Store 将 Windows 程序包管理器注册为异步进程的一部分）之前，WinGet 工具不可用。 如果最近已经以用户身份进行了首次登录，但发现 WinGet 尚不可用，则可以打开 PowerShell 并输入以下命令来请求此 WinGet 注册：<code>Add-AppxPackage -RegisterByFamilyName -MainPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe</code>。</p></blockquote><h3 id="2-1-管理员注意事项"><a href="#2-1-管理员注意事项" class="headerlink" title="2.1 管理员注意事项"></a>2.1 管理员注意事项</h3><p>安装程序的行为可能会有所不同，具体取决于你是否是以管理员权限运行 <strong>WinGet</strong>。</p><ul><li><p>在没有管理员权限的情况下运行 <strong>WinGet</strong> 时，某些应用程序可能会<a href="https://learn.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control/how-user-account-control-works">要求提升权限</a>才能进行安装。 当安装程序运行时，Windows 会提示你<a href="https://learn.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control/how-user-account-control-works">提升权限</a>。 如果你选择不提升权限，则应用程序无法进行安装。</p></li><li><p>在管理员命令提示符下运行 <strong>WinGet</strong> 时，如果应用程序要求你提升权限，你不会看到<a href="https://learn.microsoft.com/zh-cn/windows/security/identity-protection/user-account-control/how-user-account-control-works">提升权限提示</a>。 以管理员身份运行命令提示符时请务必小心，仅安装你信任的应用程序。</p></li></ul><h2 id="3-使用-WinGet"><a href="#3-使用-WinGet" class="headerlink" title="3. 使用 WinGet"></a>3. 使用 WinGet</h2><p>安装<strong>应用安装程序</strong>后，可以通过在命令提示符下键入“WinGet”来运行 <strong>WinGet</strong>。</p><p>最常见的使用场景之一是搜索并安装你最喜欢的工具。</p><ol><li><p>若要<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/search">搜索</a>某个工具，请键入 <code>winget search &lt;appname&gt;</code>。</p></li><li><p>确认你需要的工具可用后，可以通过键入 <code>winget install &lt;appname&gt;</code> 来<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/install">安装</a>该工具。 <strong>WinGet</strong> 工具会启动安装程序，将应用程序安装在你的电脑上。 <img src="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/images/install.png" alt="winget 命令行"></p></li><li><p>除了安装和搜索外，<strong>WinGet</strong> 还提供了许多其他命令，用来<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/show">显示应用程序详细信息</a>，<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/source">更改源</a>以及<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/validate">验证程序包</a>。 若要获取完整的命令列表，请键入 <code>winget --help</code>。 <img src="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/images/help.png" alt="winget help"></p></li></ol><p>一些用户报告了客户端不在其路径上的<a href="https://github.com/microsoft/winget-cli/issues/210">问题</a>。</p><h2 id="4-新安装的Windows机器安装所需软件的script记录"><a href="#4-新安装的Windows机器安装所需软件的script记录" class="headerlink" title="4. 新安装的Windows机器安装所需软件的script记录"></a>4. 新安装的Windows机器安装所需软件的script记录</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-comment">## 更换winget源为中科大的镜像源</span><br>winget source remove winget<br>winget source add winget https://mirrors.ustc.edu.cn/win<span class="hljs-built_in">get-source</span><br><br>winget install <span class="hljs-literal">--id</span> Git.Git <span class="hljs-literal">-e</span> <span class="hljs-literal">--source</span> winget<br><br>winget install <span class="hljs-literal">-e</span> <span class="hljs-literal">--id</span> Postman.Postman<br><br>winget install Typora <span class="hljs-literal">-s</span> winget<br>winget install Notepad++<br>winget install vim.vim<br>winget install <span class="hljs-string">&quot;Python 3.12&quot;</span> <span class="hljs-literal">-s</span> winget<br>winget install <span class="hljs-literal">-e</span> <span class="hljs-literal">--id</span> Microsoft.AzureCLI<br><br><br><span class="hljs-comment">#国产安装常用软件</span><br>winget install WeChat <span class="hljs-literal">-s</span> winget <span class="hljs-literal">--accept-package-agreements</span><br>winget install Tencent.QQ.NT <span class="hljs-literal">-s</span> winget<br>winget install <span class="hljs-literal">--id</span>=Nutstore.Nutstore  <span class="hljs-literal">-e</span><br>winget install 百度网盘 <span class="hljs-literal">-s</span> winget<br>winget install 网易有道翻译 <span class="hljs-literal">-s</span> winget<br><span class="hljs-comment">##winget install 企业微信</span><br><span class="hljs-comment">##winget install 钉钉 -s winget --id Alibaba.DingTalk</span><br><span class="hljs-comment">##winget install 腾讯会议 -s winget</span><br>winget install NetEase.CloudMusic<br>winget install Thunder.Thunder <span class="hljs-literal">-s</span> winget<br>winget install Google.Chrome<br><br><span class="hljs-comment"># Microsoft PowerToys：用于自定义 Windows 的实用工具</span><br><span class="hljs-comment"># https://learn.microsoft.com/zh-cn/windows/powertoys</span><br>winget install Microsoft.PowerToys<br><span class="hljs-comment"># 动态桌面</span><br>winget install rocksdanister.LivelyWallpaper<br><br><br><span class="hljs-comment"># 关闭快捷方式的后缀自动添加</span><br><span class="hljs-built_in">Set-ItemProperty</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer&quot;</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;link&quot;</span> <span class="hljs-literal">-Type</span> Binary <span class="hljs-literal">-Value</span> ([<span class="hljs-built_in">byte</span>[]](<span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>x00))<br><span class="hljs-comment"># 启用文件扩展名的显示</span><br><span class="hljs-built_in">Set-ItemProperty</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced&quot;</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;HideFileExt&quot;</span> <span class="hljs-literal">-Value</span> <span class="hljs-number">0</span><br><span class="hljs-comment"># 更改右键菜单为传统样式（取消文件的鼠标右键的二级菜单功能）</span><br><span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;HKCU:\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> <span class="hljs-literal">-Force</span> | <span class="hljs-built_in">Set-ItemProperty</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;(Default)&quot;</span> <span class="hljs-literal">-Value</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 刷新或重启资源管理器</span><br><span class="hljs-built_in">Stop-Process</span> <span class="hljs-literal">-Name</span> explorer <span class="hljs-literal">-Force</span>; <span class="hljs-built_in">Start-Process</span> explorer<br><span class="hljs-comment"># 开启运行脚本的功能</span><br><span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned<br><span class="hljs-comment"># 给powershell添加基本的Linux命令（添加Path路径，Git软件提供）</span><br><span class="hljs-comment">##[Environment]::SetEnvironmentVariable(&quot;Path&quot;, $([Environment]::GetEnvironmentVariable(&quot;Path&quot;, &quot;Machine&quot;) + &quot;;C:\Program Files\Git\usr\bin&quot;), &quot;Machine&quot;)</span><br><br><br><span class="hljs-comment"># 安装快捷键软件</span><br>winget install AutoHotkey.AutoHotkey<br><br><br><span class="hljs-comment"># 使用 Ctrl+Alt+t 打开终端中的Ubuntu控制台</span><br>vim c:/open_ubuntu.ahk<br>   ^!t::<br>   <span class="hljs-keyword">If</span> not A_IsAdmin<br>   &#123;<br>       Run *RunAs <span class="hljs-string">&quot;%A_ScriptFullPath%&quot;</span>  ; 以管理员权限重新运行脚本<br>       ExitApp<br>   &#125;<br>   Run, wt <span class="hljs-literal">-p</span> <span class="hljs-string">&quot;Ubuntu 24.04 LTS&quot;</span><br>   <span class="hljs-keyword">return</span><br><span class="hljs-comment"># 运行脚本</span><br>c:/open_ubuntu.ahk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github+Hexo搭建个人Blog</title>
    <link href="/2024/10/18/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/"/>
    <url>/2024/10/18/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/</url>
    
    <content type="html"><![CDATA[<h2 id="1-GitHub环境准备"><a href="#1-GitHub环境准备" class="headerlink" title="1. GitHub环境准备"></a>1. GitHub环境准备</h2><h3 id="1-1-创建Repo"><a href="#1-1-创建Repo" class="headerlink" title="1.1 创建Repo"></a>1.1 创建Repo</h3><blockquote><p>注意：此处<em><strong>username.github.io</strong></em>中的<em><strong>username</strong></em>和您使用的github的<em><strong>account name</strong></em>应是一样的，要不然deploy之后会出现404 </p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/7578cb1a1267ca6cc053b980e7af661d/xmlnote/WEBRESOURCE7e5fdc6cac2f4e1a0ee944c1ef14c9e0/9159" alt="GitHub-Repo"></p><h3 id="1-2-配置ssh-key"><a href="#1-2-配置ssh-key" class="headerlink" title="1.2 配置ssh key"></a>1.2 配置ssh key</h3><p>此处可以在网络上搜索到不少参考，就不在此处赘述了。</p><h2 id="2-安装必要软件"><a href="#2-安装必要软件" class="headerlink" title="2. 安装必要软件"></a>2. 安装必要软件</h2><blockquote><p>此处，本人所运行的环境为windows + WSL, nodeJS和Hexo都安装在WSL的Ubuntu里面,以下的命令也都为ubuntu命令</p></blockquote><h3 id="2-1-安装Git"><a href="#2-1-安装Git" class="headerlink" title="2.1 安装Git"></a>2.1 安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y git<br></code></pre></td></tr></table></figure><h3 id="2-2-安装Node-js和npm"><a href="#2-2-安装Node-js和npm" class="headerlink" title="2.2 安装Node.js和npm"></a>2.2 安装Node.js和npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install nodejs npm<br></code></pre></td></tr></table></figure><p>安装完成后运行下面的命令，验证安装：<br>执行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">node <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>输出node.js的版本：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v18</span>.<span class="hljs-number">19</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>输出npm的版本：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">9</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-3-安装Hexo与初始化"><a href="#2-3-安装Hexo与初始化" class="headerlink" title="2.3 安装Hexo与初始化"></a>2.3 安装Hexo与初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 <code>C:\Users\ext_xinweihana\Documents\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /mnt/c/Users/ext_xinweihana/Documents/Blogs<br>$ hexo init <span class="hljs-comment"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure><h2 id="3-Hexo的配置与部署到Github"><a href="#3-Hexo的配置与部署到Github" class="headerlink" title="3. Hexo的配置与部署到Github"></a>3. Hexo的配置与部署到Github</h2><h3 id="3-1-生成静态文件"><a href="#3-1-生成静态文件" class="headerlink" title="3.1 生成静态文件"></a>3.1 生成静态文件</h3><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g <span class="hljs-comment"># 生成静态文件</span><br></code></pre></td></tr></table></figure><p>执行以上命令后，会在博客所在目录下的<code>public</code> 文件夹中生成相关的 <code>html</code> 文件，这些文件将来都是要提交到 <code>GitHub</code> 上的 <code>username.github.io</code> 的仓库中去的。</p><h3 id="3-2-本地预览"><a href="#3-2-本地预览" class="headerlink" title="3.2 本地预览"></a>3.2 本地预览</h3><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s <span class="hljs-comment"># 开启本地预览</span><br></code></pre></td></tr></table></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。</p><h3 id="3-3-上传部署到-GitHub"><a href="#3-3-上传部署到-GitHub" class="headerlink" title="3.3 上传部署到 GitHub"></a>3.3 上传部署到 GitHub</h3><h4 id="3-3-1-配置站点配置文件"><a href="#3-3-1-配置站点配置文件" class="headerlink" title="3.3.1 配置站点配置文件"></a>3.3.1 配置站点配置文件</h4><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是博客所在根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:zhangak0214/zhangak0214.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-安装部署所必要的插件"><a href="#3-3-2-安装部署所必要的插件" class="headerlink" title="3.3.2 安装部署所必要的插件"></a>3.3.2 安装部署所必要的插件</h4><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p><h4 id="3-3-3-部署到-GitHub"><a href="#3-3-3-部署到-GitHub" class="headerlink" title="3.3.3 部署到 GitHub"></a>3.3.3 部署到 GitHub</h4><p>在博客所在的根目录中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean &amp;&amp; hexo deploy <span class="hljs-comment">##可简写为 hexo c &amp;&amp; hexo d</span><br></code></pre></td></tr></table></figure><p>等待部署成功后，打开对应的网址 <code>https://username.github.io</code>，如果出现了和本地预览一样的效果，那么，表明部署成功。</p><h2 id="4-一些问题及优化"><a href="#4-一些问题及优化" class="headerlink" title="4. 一些问题及优化"></a>4. 一些问题及优化</h2><h3 id="4-1-LF-will-be-replaced-by-CRLF"><a href="#4-1-LF-will-be-replaced-by-CRLF" class="headerlink" title="4.1 LF will be replaced by CRLF"></a>4.1 LF will be replaced by CRLF</h3><p>如果这里出现了下面这样的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">warning: LF will be replaced by CRLF in<br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/7578cb1a1267ca6cc053b980e7af661d/xmlnote/WEBRESOURCE7fbfa5855daba647c0aa087c9d31b161/9169" alt="Warning Info"></p><p>直接执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.safecrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important">stackoverflow</a></p><h3 id="4-2-Github-仓库的-README-md-被渲染了了-README-html"><a href="#4-2-Github-仓库的-README-md-被渲染了了-README-html" class="headerlink" title="4.2 Github 仓库的 README.md 被渲染了了 README.html"></a>4.2 Github 仓库的 README.md 被渲染了了 README.html</h3><p>这个我们知道是不应该被渲染的。这里的话，hexo 也提供了一个选项，那就是在根目录下的 <code>_config.yaml</code> 中加上这样一个配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">README.md</span><br></code></pre></td></tr></table></figure><p>这样 hexo 在渲染时就会跳过这个 README 的 md 文件，然后我们在 <code>hexo d</code> 之后就可以直接在仓库的首页看到这个 README 了。</p><h3 id="4-3-将-fluid-主题的滚动条设置为无圆角"><a href="#4-3-将-fluid-主题的滚动条设置为无圆角" class="headerlink" title="4.3 将 fluid 主题的滚动条设置为无圆角"></a>4.3 将 fluid 主题的滚动条设置为无圆角</h3><p>在 <code>source/css/custom.css</code> 中添加如下样式代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 将进度条的圆角去掉 */</span><br>::-webkit-scrollbar-thumb &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，基本的博客就搭建完成了。下一篇博客介绍更换主题以及主题的相关配置。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1970/01/01/hello-world/"/>
    <url>/1970/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>example</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
